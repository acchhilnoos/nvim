vim.g.mapleader = " "
vim.g.maplocalleader = " "
-- vim.keymap.set("n", "<leader>pv", vim.cmd.Ex)
-- vim.keymap.set("n", "<leader>pv", "<cmd>lua require('nvim-tree.api').tree.open()<CR>", {})
vim.keymap.set("n", "<leader>pv", "<cmd>lua require('oil').open()<CR>", {})
vim.keymap.set("n", "<leader>H", ":vsplit<CR>")
vim.keymap.set("n", "<leader>J", ":split <BAR> :wincmd j<CR>")
vim.keymap.set("n", "<leader>K", ":split<CR>")
vim.keymap.set("n", "<leader>L", ":vsplit <BAR> :wincmd l<CR>")
vim.cmd.nnoremap("<C-d>", "<C-d>zz")
vim.cmd.nnoremap("<C-u>", "<C-u>zz")
vim.cmd.inoremap("jj", "<Esc>")
vim.keymap.set("n", "<leader>aa", "<cmd>lua require('harpoon.mark').add_file()<CR>", {})
vim.keymap.set("n", "<leader>ar", "<cmd>lua require('harpoon.mark').rm_file()<CR>", {})
vim.keymap.set("n", "<leader>cm", "<cmd>lua require('harpoon.mark').clear_all()<CR>", {})
vim.keymap.set("n", "<leader>av", "<cmd>lua require('harpoon.ui').toggle_quick_menu()<CR>", {})
vim.keymap.set("n", "<leader>a1", "<cmd>lua require('harpoon.ui').nav_file(1)<CR>", {})
vim.keymap.set("n", "<leader>a2", "<cmd>lua require('harpoon.ui').nav_file(2)<CR>", {})
vim.keymap.set("n", "<leader>a3", "<cmd>lua require('harpoon.ui').nav_file(3)<CR>", {})
vim.keymap.set("n", "<leader>a4", "<cmd>lua require('harpoon.ui').nav_file(4)<CR>", {})
vim.keymap.set("n", "<leader>a5", "<cmd>lua require('harpoon.ui').nav_file(5)<CR>", {})
vim.keymap.set("n", "<leader>a6", "<cmd>lua require('harpoon.ui').nav_file(6)<CR>", {})
vim.keymap.set("n", "<leader>a7", "<cmd>lua require('harpoon.ui').nav_file(7)<CR>", {})
vim.keymap.set("n", "<leader>a8", "<cmd>lua require('harpoon.ui').nav_file(8)<CR>", {})
vim.keymap.set("n", "<leader>a9", "<cmd>lua require('harpoon.ui').nav_file(9)<CR>", {})
vim.keymap.set("n", "<leader>a0", "<cmd>lua require('harpoon.ui').nav_file(0)<CR>", {})
vim.keymap.set("n", "[a", "<cmd>lua require('harpoon.ui').nav_prev()<CR>", {})
vim.keymap.set("n", "]a", "<cmd>lua require('harpoon.ui').nav_next()<CR>", {})
vim.keymap.set("v", "<leader>zf", ":'<,'>TZNarrow<CR>", {})
vim.keymap.set("n", "<leader>zf", ":TZAtaraxis<CR>", {})
vim.keymap.set({ "n", "v" }, "<Space>", "<Nop>", { silent = true })
vim.keymap.set("n", "k", "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
vim.keymap.set("n", "j", "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
vim.keymap.set("n", "[d", vim.diagnostic.goto_prev, { desc = "Go to previous diagnostic message" })
vim.keymap.set("n", "]d", vim.diagnostic.goto_next, { desc = "Go to next diagnostic message" })
vim.keymap.set("n", "<leader>e", vim.diagnostic.open_float, { desc = "Open floating diagnostic message" })
vim.keymap.set("n", "<leader>q", vim.diagnostic.setloclist, { desc = "Open diagnostics list" })
vim.keymap.set("n", "<leader>?", require("telescope.builtin").oldfiles, { desc = "[?] Find recently opened files" })
vim.keymap.set("n", "<leader><space>", require("telescope.builtin").buffers, { desc = "[ ] Find existing buffers" })
vim.keymap.set("n", "<leader>/", function()
	require("telescope.builtin").current_buffer_fuzzy_find(require("telescope.themes").get_dropdown({
		winblend = 10,
		previewer = false,
	}))
end, { desc = "[/] Fuzzily search in current buffer" })

local function telescope_live_grep_open_files()
	require("telescope.builtin").live_grep({
		grep_open_files = true,
		prompt_title = "Live Grep in Open Files",
	})
end
vim.keymap.set("n", "<leader>s/", telescope_live_grep_open_files, { desc = "[S]earch [/] in Open Files" })
vim.keymap.set("n", "<leader>ss", require("telescope.builtin").builtin, { desc = "[S]earch [S]elect Telescope" })
vim.keymap.set("n", "<leader>gf", require("telescope.builtin").git_files, { desc = "Search [G]it [F]iles" })
vim.keymap.set("n", "<leader>sf", require("telescope.builtin").find_files, { desc = "[S]earch [F]iles" })
vim.keymap.set("n", "<leader>sh", require("telescope.builtin").help_tags, { desc = "[S]earch [H]elp" })
vim.keymap.set("n", "<leader>sw", require("telescope.builtin").grep_string, { desc = "[S]earch current [W]ord" })
vim.keymap.set("n", "<leader>sg", require("telescope.builtin").live_grep, { desc = "[S]earch by [G]rep" })
vim.keymap.set("n", "<leader>sG", ":LiveGrepGitRoot<cr>", { desc = "[S]earch by [G]rep on Git Root" })
vim.keymap.set("n", "<leader>sd", require("telescope.builtin").diagnostics, { desc = "[S]earch [D]iagnostics" })
vim.keymap.set("n", "<leader>sr", require("telescope.builtin").resume, { desc = "[S]earch [R]esume" })
